{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About \u00b6 rbx-ds-cloud is a Command Line Interface and Library for interacting with the Roblox Datastore OpenCloud API Navigation \u00b6 View the Install section to see how to install the binary or library View the CLI section to see how to use it The API section should help you redirect to the library's documentation","title":"Home"},{"location":"#about","text":"rbx-ds-cloud is a Command Line Interface and Library for interacting with the Roblox Datastore OpenCloud API","title":"About"},{"location":"#navigation","text":"View the Install section to see how to install the binary or library View the CLI section to see how to use it The API section should help you redirect to the library's documentation","title":"Navigation"},{"location":"api/","text":"Documentation \u00b6 Visit docs.rs/rbx-ds-cloud for the library's documentation","title":"Library Documentation"},{"location":"api/#documentation","text":"Visit docs.rs/rbx-ds-cloud for the library's documentation","title":"Documentation"},{"location":"cli/","text":"CLI for interacting with the API \u00b6 You can visit the Roblox Documentation for more information about the API List Data Stores \u00b6 List all Datastores in the specified \"universe\" or game USAGE: rbx-ds-cloud list-data-stores [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --limit <LIMIT> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -c, --cursor <CURSOR> (Optional) Cursor for the next set of data -l, --limit <LIMIT> (INTEGER) Maximum number of items to return -p, --prefix <PREFIX> (Optional) Return only data stores with this prefix -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page List Entries \u00b6 Returns a list of entry keys within a data store USAGE: rbx-ds-cloud list-entries [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --limit <LIMIT> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -c, --cursor <CURSOR> (Optional) Provide to request the next set of data -d, --datastore-name <DATASTORE_NAME> Name of the data store -l, --limit <LIMIT> (INTEGER) Maximum number of items to return -o, --all-scopes <ALL_SCOPES> If true, return keys from all scopes [possible values: true, false] -p, --prefix <PREFIX> (Optional) Return only keys with this prefix -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page Get Entry \u00b6 Returns the value associated with an entry USAGE: rbx-ds-cloud get-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page Set Entry \u00b6 Sets the value, metadata and user IDs associated with an entry USAGE: rbx-ds-cloud set-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --data <DATA> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -D, --data <DATA> JSON-stringified or stringify-able data (Limit: 4MB) -e, --exclusive-create <EXCLUSIVE_CREATE> (Optional) Only create the entry if it does not exist [possible values: true ,false] -i, --match-version <MATCH_VERSION> (Optional) Only update if current version matches this -k, --key <KEY>The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -t, --attributes <ATTRIBUTES> (Optional) JSON-stringified attributes data -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page -U, --user-ids <USER_IDS> (Optional) Associated UserID (can be multiple) Increment Entry \u00b6 Increments the value for an entry by a given amount, or create a new entry with that amount USAGE: rbx-ds-cloud increment-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --increment-by <INCREMENT_BY> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -i, --increment-by <INCREMENT_BY> The amount by which the entry should be incremented -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -t, --attributes <ATTRIBUTES> (Optional) JSON-stringified attributes data -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page -U, --user-ids <USER_IDS> (Optional) Comma-separated list of Roblox user IDs Delete Entry \u00b6 Marks the entry as deleted by creating a 'tombstone' version. Entries are deleted permanently after 30 days USAGE: rbx-ds-cloud delete-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page List Entry Versions \u00b6 Returns the versions and metadata of an Entry of a datastore USAGE: rbx-ds-cloud list-entry-versions [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --sort-order <SORT_ORDER> --limit <LIMIT> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -c, --cursor <CURSOR> (Optional) Cursor for the next set of data -d, --datastore-name <DATASTORE_NAME> Name of the data store -e, --end-time <END_TIME> (Optional) End time constraint (ISO UTC Datetime) -k, --key <KEY> The key which identifies the entry -l, --limit <LIMIT> (INTEGER) Maximum number of items to return -o, --sort-order <SORT_ORDER> Sort order [possible values: ascending, descending] -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -t, --start-time <START_TIME> (Optional) Start time constraint (ISO UTC Datetime) -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page Get Entry Version \u00b6 Returns the metadata of a specific version of an entry USAGE: rbx-ds-cloud get-entry-version [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --version-id <VERSION_ID> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page -v, --version-id <VERSION_ID> The version of the key","title":"CLI"},{"location":"cli/#cli-for-interacting-with-the-api","text":"You can visit the Roblox Documentation for more information about the API","title":"CLI for interacting with the API"},{"location":"cli/#list-data-stores","text":"List all Datastores in the specified \"universe\" or game USAGE: rbx-ds-cloud list-data-stores [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --limit <LIMIT> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -c, --cursor <CURSOR> (Optional) Cursor for the next set of data -l, --limit <LIMIT> (INTEGER) Maximum number of items to return -p, --prefix <PREFIX> (Optional) Return only data stores with this prefix -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page","title":"List Data Stores"},{"location":"cli/#list-entries","text":"Returns a list of entry keys within a data store USAGE: rbx-ds-cloud list-entries [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --limit <LIMIT> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -c, --cursor <CURSOR> (Optional) Provide to request the next set of data -d, --datastore-name <DATASTORE_NAME> Name of the data store -l, --limit <LIMIT> (INTEGER) Maximum number of items to return -o, --all-scopes <ALL_SCOPES> If true, return keys from all scopes [possible values: true, false] -p, --prefix <PREFIX> (Optional) Return only keys with this prefix -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page","title":"List Entries"},{"location":"cli/#get-entry","text":"Returns the value associated with an entry USAGE: rbx-ds-cloud get-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page","title":"Get Entry"},{"location":"cli/#set-entry","text":"Sets the value, metadata and user IDs associated with an entry USAGE: rbx-ds-cloud set-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --data <DATA> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -D, --data <DATA> JSON-stringified or stringify-able data (Limit: 4MB) -e, --exclusive-create <EXCLUSIVE_CREATE> (Optional) Only create the entry if it does not exist [possible values: true ,false] -i, --match-version <MATCH_VERSION> (Optional) Only update if current version matches this -k, --key <KEY>The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -t, --attributes <ATTRIBUTES> (Optional) JSON-stringified attributes data -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page -U, --user-ids <USER_IDS> (Optional) Associated UserID (can be multiple)","title":"Set Entry"},{"location":"cli/#increment-entry","text":"Increments the value for an entry by a given amount, or create a new entry with that amount USAGE: rbx-ds-cloud increment-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --increment-by <INCREMENT_BY> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -i, --increment-by <INCREMENT_BY> The amount by which the entry should be incremented -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -t, --attributes <ATTRIBUTES> (Optional) JSON-stringified attributes data -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page -U, --user-ids <USER_IDS> (Optional) Comma-separated list of Roblox user IDs","title":"Increment Entry"},{"location":"cli/#delete-entry","text":"Marks the entry as deleted by creating a 'tombstone' version. Entries are deleted permanently after 30 days USAGE: rbx-ds-cloud delete-entry [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page","title":"Delete Entry"},{"location":"cli/#list-entry-versions","text":"Returns the versions and metadata of an Entry of a datastore USAGE: rbx-ds-cloud list-entry-versions [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --sort-order <SORT_ORDER> --limit <LIMIT> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -c, --cursor <CURSOR> (Optional) Cursor for the next set of data -d, --datastore-name <DATASTORE_NAME> Name of the data store -e, --end-time <END_TIME> (Optional) End time constraint (ISO UTC Datetime) -k, --key <KEY> The key which identifies the entry -l, --limit <LIMIT> (INTEGER) Maximum number of items to return -o, --sort-order <SORT_ORDER> Sort order [possible values: ascending, descending] -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -t, --start-time <START_TIME> (Optional) Start time constraint (ISO UTC Datetime) -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page","title":"List Entry Versions"},{"location":"cli/#get-entry-version","text":"Returns the metadata of a specific version of an entry USAGE: rbx-ds-cloud get-entry-version [OPTIONS] --universe-id <UNIVERSE_ID> --api-key <API_KEY> --datastore-name <DATASTORE_NAME> --key <KEY> --version-id <VERSION_ID> OPTIONS: -a, --api-key <API_KEY> API key of Roblox Open Cloud -d, --datastore-name <DATASTORE_NAME> Name of the data store -k, --key <KEY> The key which identifies the entry -s, --scope <SCOPE> (Optional) If \"None\", defaults to global, similar to Lua API -u, --universe-id <UNIVERSE_ID> The value of DataModel.GameId, which is visible in the URL on the universe's Configure page -v, --version-id <VERSION_ID> The version of the key","title":"Get Entry Version"},{"location":"install/","text":"Install \u00b6 Installing the Binary \u00b6 You MUST have Rust installed You can run the following command to install the binary. cargo install rbx-ds-cloud It will be installed on the $HOME/.cargo/bin path by default, you may change it in your system's enviorment variables. You can download the repository and build from the source git clone https://github.com/RefinedDev/rbx-ds-cloud.git cd rbx-ds-cloud cargo build --release Or, download and unzip the tool for your OS from the releases page Installing the Library \u00b6 If you would like to use rbx-ds-cloud in a Rust project, just add rbx-ds-cloud to the Cargo.toml dependancy list of that project [dependencies] rbx-ds-cloud = \"0.1.3\" Or, you can use the cargo add command cargo add rbx-ds-cloud","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#installing-the-binary","text":"You MUST have Rust installed You can run the following command to install the binary. cargo install rbx-ds-cloud It will be installed on the $HOME/.cargo/bin path by default, you may change it in your system's enviorment variables. You can download the repository and build from the source git clone https://github.com/RefinedDev/rbx-ds-cloud.git cd rbx-ds-cloud cargo build --release Or, download and unzip the tool for your OS from the releases page","title":"Installing the Binary"},{"location":"install/#installing-the-library","text":"If you would like to use rbx-ds-cloud in a Rust project, just add rbx-ds-cloud to the Cargo.toml dependancy list of that project [dependencies] rbx-ds-cloud = \"0.1.3\" Or, you can use the cargo add command cargo add rbx-ds-cloud","title":"Installing the Library"}]}